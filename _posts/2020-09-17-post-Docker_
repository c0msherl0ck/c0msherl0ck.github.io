---
title: "[Docker] MediaWiki 이미지 생성 및 배포하기"
categories:
  - Cloud
tags:
  - Docker
  - Ubuntu
  - MediaWiki
comments: true
---

이전글에서 생성한 Ubuntu 16.04 환경에서 구축한 MediaWiki를 Docker 이미지로 만들어 배포하는 방안에 대해 기술한다.


# 1. Docker 개념

## 1.1. VMware vs Docker

VMware 가상머신하고 유사하며 차이는 있지만, 리눅스 환경에서 주로 사용하는 가상머신이라고 생각하면 편리하다. 

||VMware|Docker|
|---|---|---|
|주 사용|개인용 PC Windows/Mac|Linux 서버|
|이미지 확장자|vmdk|?|
|이미지 생성|snapshot|commit|


## 1.2. Docker 필요성 및 장점

이전 글에서 MediaWiki 구축 당시 php 버전이 맞지 않아 에러가 발생하며 php 버전 수정이 필요했다. 
이처럼 개발 환경과 운영 환경의 차이로 인해 어플리케이션 배포 시 환경 구성을 해주어야 하는데 이를 *프로비져닝(Provisioning)*이라고 한다. 
Docker는 어플리케이션 실행 환경을 포함한 이미지 구축 및 배포를 통해 프로비져닝 과정을 용이하게 한다. 


# 2. Docker 설치

Ubuntu 18.04 환경에서 Docker 설치 및 실행

```
$ sudo apt install docker.io
$ docker -v
  Docker version 19.03.6, build 369ce74a3c
$ sudo service docker start
$ sudo systemctl status docker
  ● docker.service - Docker Application Container Engine
     Loaded: loaded (/lib/systemd/system/docker.service; disabled; vendor preset: enabled)
     Active: active (running) 
```

# 3. Docker 환경 구축

docker 에서 Ubuntu 16.04 이미지 실행 및 접속

 ```
 sudo docker run -p 80:80 -d --privileged ubuntu:16.04 /sbin/init
 // -d 옵션: 백그라운드로 실행 옵션
 // -p 포트옵션: 호스트 서버의 포트 80번을 docker image (ubuntu 16.04)의 80번 포트로 연결
 // --privileged: docker 내에서 systemctl 등의 명령어 사용을 위해서 권한 부여
 
 sudo docker ps
 // Container ID 조회
 
 sudo docker exec -it [컨테이너 ID] /bin/bash
 // 실행중인 ubuntu 16.04 컨테이너의 bash 쉘 실행
 ```

작업 전 다음 명령어 실행
```
apt-get update
apt-get upgrade
apt-get install wget
apt-get install software-properties-common
```

이후 과정은 이전 글 [AWS EC2 Ubuntu 16.04 에서 MediaWiki 구축하기](https://c0msherl0ck.github.io/cloud/post-AWS_MediaWiki/)
에서 진행한 작업을 도커에서 동일하게 진행한다. (`sudo` 만 제외, 이미 root 권한이므로)
이전 포스팅과의 차이점은 도커 설치 후 가상화 환경에서 Ubuntu 16.04 도커 이미지를 기반으로 환경을 구축한다는 점이다.

## MYSQL Error 처리

처음 도커 이미지 실행 시 3306 포트포워딩을 하지 않았기 때문에 MYSQL 접속 시 다음과 같은 에러가 발생한다. 

```
root# mysql -u root -p

ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock'
```

실행중인 컨테이너의 포트를 개방하는 것은 불가능하므로 작업 중인 이미지를 저장 후 포트 개방 조건과 함께 재실행한다.

```
sudo docker ps // 작업 중이던 컨테이너 ID 식별
sudo docker stop [컨테이너 ID] // 컨테이너 중지
sudo docker commit [컨테이너 ID] ubuntu-mysql-error // 도커 이미지 생성
sudo docker images // 이미지 생성 확인

  REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE
  ubuntu-mysql-error   latest              1c7367ef1384        21 seconds ago      855MB 
  ubuntu               16.04               c871c45b1573        8 days ago          127MB
```

3306 포트포워딩 조건 추가하여 컨테이너 재실행 및 접속
```
sudo docker run -p 80:80 -p 3306:3306 -d --privileged ubuntu-mysql-error /sbin/init
sudo docker ps // container id 확인
sudo docker exec -it [container id] /bin/bash
```




<center><p><img src="/assets/2020-09-16-post-AWS_MediaWiki/1.jpg"><br></p></center>

# 참고

도커 명령어 
https://nicewoong.github.io/development/2017/10/09/basic-usage-for-docker/

도커 기초
https://www.44bits.io/ko/post/easy-deploy-with-docker#%EB%8F%84%EC%BB%A4%EC%99%80-%EB%B2%84%EC%A0%84-%EA%B4%80%EB%A6%AC-%EC%8B%9C%EC%8A%A4%ED%85%9C

도커 컨테이너 포트 추가
https://oboki.net/workspace/system/docker/docker-%EC%8B%A4%ED%96%89-%EC%A4%91%EC%9D%B8-container%EC%97%90-%ED%8F%AC%ED%8A%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/


